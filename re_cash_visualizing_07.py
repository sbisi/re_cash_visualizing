# -*- coding: utf-8 -*-
"""re_cash_visualizing_07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MfBtsX_YWVD1oQYmGUir1puo_EgVb55Q

# installation Visualizing library pydeck
"""

# pip install pydeck

import pydeck as pdk
import pandas as pd

"""# reading co2-data (data whole switzerland & prognosis data)"""

# from google.colab import drive
# drive.mount('/content/drive')
# path = "drive/My Drive/Colab Notebooks/re-cash/01_co2_visualizing_models/"
# path
data = pd.read_csv("avocado.csv")

# re_cash = pd.read_csv(path + "co2_landscape.csv")
re_cash = pd.read_csv("co2_landscape.csv")
re_cash.info()
re_cash.head()

"""# eliminating not necessary data"""

re_cash_columns = re_cash.iloc[:,[7,8,14,15,23]] # select column 14 und 15 (canton, community,  Longtitude, Latitude)
re_cash_columns.info()
re_cash_columns.head()

"""# specific data for the canton AG & location Windisch


"""

re_cash_columns_canton = re_cash_columns.loc[re_cash_columns["GDEKT"] == "AG"]

re_cash_columns_community = re_cash_columns.loc[re_cash_columns["GDENAME"] == "Windisch"]
re_cash_columns_community.info()
re_cash_columns_community.head()

"""# reduction the big size of data with random function"""

re_cash_columns_random = re_cash_columns.sample(frac = 0.10, random_state=12)
re_cash_columns_random.info()
re_cash_columns_random.head()

"""# visualizing with hexagon layer (pydeck)



---


"""

tooltip = {
   "html": "<b>Elevation Value:</b> {elevationValue}",
   "style": {
        "backgroundColor": "steelblue",
        "color": "white"
   }
}

tooltip = {
    "text": "Elevation: {elevationValue}"
}

layer = pdk.Layer(
    'HexagonLayer',  # `type` positional argument is here
    re_cash_columns_random, 
    get_position=['Longitude', 'Latitude'],
    auto_highlight=True,
    elevation_scale=20,
    pickable=True,
    elevation_range=[0, 3000],
    extruded=True,
    coverage=1)

view_state = pdk.ViewState(
    longitude=8.1355,
    latitude=46.7,
    zoom=7,
    min_zoom=6,
    max_zoom=15,
    pitch=40.5,
    bearing=-20.36)

# Combined all of it and render a viewport
r = pdk.Deck(layers=[layer], 
             initial_view_state=view_state,
             tooltip={
        'html': '<b>Elevation Value:</b> {elevationValue}',
        'style': {
            'color': 'white'
        }
    })
r.to_html('hexagon-example.html')

layer = pdk.Layer(
    'HexagonLayer',  # `type` positional argument is here
    re_cash_columns_canton,
    get_position=['Longitude', 'Latitude'],
    auto_highlight=True,
    elevation_scale=20,
    pickable=True,
    elevation_range=[0, 3000],
    extruded=True,
    coverage=1)

view_state = pdk.ViewState(
    longitude=8.172154,   #Lenzburg
    latitude=47.390444,   #lenzburg
    zoom=8,
    min_zoom=8,
    max_zoom=12,
    pitch=60.5,
    bearing=-10.36)

# Combined all of it and render a viewport
r = pdk.Deck(layers=[layer], initial_view_state=view_state)
r.to_html('hexagon-example.html')

layer = pdk.Layer(
    'HexagonLayer',  # `type` positional argument is here
    re_cash_columns_community,
    get_position=['Longitude', 'Latitude'],
    auto_highlight=True,
    elevation_scale=20,
    pickable=True,
    elevation_range=[0, 1000],
    extruded=True,
    # cell_size=1,
    # get_radius=10,
    coverage=1)


view_state = pdk.ViewState(
    longitude=8.21907,
    latitude=47.4747,
    zoom=10,
    min_zoom=6,
    max_zoom=25,
    pitch=40.5,
    bearing=-20.36)

# Combined all of it and render a viewport
r = pdk.Deck(layers=[layer], initial_view_state=view_state)
r.to_html('hexagon-example.html')

"""# visualizing with scatterplot layer (pydeck)"""

layer = pdk.Layer(
    'ScatterplotLayer',     # Change the `type` positional argument here
    re_cash_columns_random,
    get_position=['Longitude', 'Latitude'],
    auto_highlight=True,
    get_radius=1000,          # Radius is given in meters
    get_fill_color=[180, 0, 200, 140],  # Set an RGBA value for fill
    pickable=True)
r = pdk.Deck(layers=[layer], initial_view_state=view_state)
r.to_html('hexagon-example.html')

"""# visualizing with column layer"""

view = pdk.ViewState(
    longitude=8.1355,
    latitude=46.7,
    zoom=7,
    min_zoom=6,
    max_zoom=15,
    pitch=40.5,
    bearing=-20.36)

# layer
column_layer = pdk.Layer('ColumnLayer',
                         data=re_cash_columns_random,
                         get_position=['Longitude', 'Latitude'],
                         get_elevation='co2_m2',
                         elevation_scale=100,
      #new:
      # elevation_range=[0, 10],
      extruded=True,
      coverage=1,                       
                         radius=100,
                         get_fill_color=[255, 165, 0, 80],
                         pickable=True,
                         auto_highlight=True)


# render map
# with no map_style, map goes to default (e.g: dark, light, road, satellite, dark_no_labels, light_no_labels)
column_layer_map = pdk.Deck(layers=column_layer,  map_style='dark',
                            initial_view_state=view)

# display and save map (to_html(), show())
# column_layer_map.show()
# column_layer_map.to_html(path + "column_layer_map.show")

"""# visualizing dirty buildings > 30 kg co2/m2 EBF"""

#GlobeView

import pydeck as pdk
import pandas as pd

df = re_cash_columns_random

def is_not_ecological(co2_m2):
    """Return a green RGB value if a location produces to much co2"""
    if co2_m2 > 30.0:
        return [255, 0, 187]
    return[0, 187, 255]

df["color"] = df["co2_m2"].apply(is_not_ecological)

view_state = pdk.ViewState(latitude=46.7, longitude=8.1355, zoom=6, min_zoom=2)
# Set height and width variables
view = pdk.View(type="_GlobeView", controller=True, width=1000, height=700)

COUNTRIES = "https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_admin_0_scale_rank.geojson"

layers = [
    pdk.Layer(
        # "GeoJsonLayer",
        # "GridLayer", (COOL !)
        "ContourLayer",
        id="base-map",
        data=COUNTRIES,
        stroked=False,
        filled=True,
        get_fill_color=[200, 200, 200],
    ),
    pdk.Layer(
        "ColumnLayer",
        id="co2_m2",
        data=df,
        get_elevation="co2_m2",
        get_position=["Longitude", "Latitude"],
        elevation_scale=300,
        pickable=True,
        auto_highlight=True,
        radius=200,
        get_fill_color="color",
    ),
]

deck = pdk.Deck(
    views=[view],
    initial_view_state=view_state,
    tooltip={"text": "{STRNAME}, {PLZNAME}, co2_m2: {co2_m2}"},
    layers=layers,
    # Note that this must be set for the globe to be opaque
    parameters={"cull": True},
)

deck.to_html("globe_view.html", css_background_color="black")

"""# visualizing with grid layer"""

re_cash_columns_random = re_cash_columns.sample(frac = 0.05, random_state=12)
re_cash_columns_random.info()
re_cash_columns_random.head()

df = re_cash_columns_random

# Define a layer to display on a map

layer = pdk.Layer(
    "GridLayer", df, pickable=True, extruded=True, cell_size=200, elevation_scale=4, get_position=['Longitude', 'Latitude'],
)

# view_state = pdk.ViewState(latitude=46.7, longitude=8.1355, zoom=8, min_zoom=2)
# Set height and width variables
# view = pdk.View(type="_GlobeView", controller=True, width=1000, height=700)

view_state = pdk.ViewState(latitude=46.7, longitude=8.1355, zoom=8, bearing=0, pitch=45)

# Render
r = pdk.Deck(layers=[layer], initial_view_state=view_state, tooltip={"text": "{position}\nCount: {count}"},)
r.to_html("grid_layer.html")

# EXAMPLE WINDISCH

re_cash_columns_random = re_cash_columns.sample(frac = 0.05, random_state=12)
# re_cash_columns_random = re_cash.sample(frac = 0.10, random_state=12)
re_cash_columns_random.info()
re_cash_columns_random.head()

df = re_cash_columns_community

# Define a layer to display on a map

layer_windisch = pdk.Layer(
    "GridLayer", df, pickable=True, extruded=True, cell_size=30, elevation_scale=2, get_position=['Longitude', 'Latitude'],
)

# view_state = pdk.ViewState(latitude=46.7, longitude=8.22106, zoom=100, min_zoom=2)
# Set height and width variables
# view = pdk.View(type="_GlobeView", controller=True, width=1000, height=100)

view_state = pdk.ViewState(latitude=47.4747, longitude=8.21907, zoom=14, bearing=0, pitch=50,width=100, height=100)

# Render
r1 = pdk.Deck(layers=[layer_windisch], initial_view_state=view_state, tooltip={"text": "{position}\nCount: {count}"},)
r1.to_html("grid_layer.html")

"""# visualizing with map layer"""

re_cash_columns_random

import plotly.express as px

fig = px.scatter_mapbox(re_cash_columns_random, lat="Latitude", lon="Longitude", hover_name="GDENAME", hover_data=["co2_m2"],
                        color_discrete_sequence=["fuchsia"], zoom=7, height=2000)
fig.update_layout(mapbox_style="open-street-map")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
# Zeigt Grafik in google explorer
fig.show()

"""# visualisation with heatmap layer"""

#GlobeView

import pydeck as pdk
import pandas as pd

df = re_cash_columns_random

def is_not_ecological(co2_m2):
    """Return a green RGB value if a location produces to much co2"""
    if co2_m2 > 30.0:
        return [255, 0, 187]
    return[0, 187, 255]

df["color"] = df["co2_m2"].apply(is_not_ecological)

view_state = pdk.ViewState(latitude=46.7, longitude=8.1355, zoom=6, min_zoom=2)
# Set height and width variables
view = pdk.View(type="_GlobeView", controller=True, width=1000, height=700)

COUNTRIES = "https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_admin_0_scale_rank.geojson"

layers = [
    pdk.Layer(
        # "GeoJsonLayer",
        # "GridLayer", (COOL !)
        "ContourLayer",
        id="base-map",
        data=COUNTRIES,
        stroked=False,
        filled=True,
        get_fill_color=[200, 200, 200],
    ),
    pdk.Layer(
        "ColumnLayer",
        id="co2_m2",
        data=df,
        get_elevation="co2_m2",
        get_position=["Longitude", "Latitude"],
        elevation_scale=300,
        pickable=True,
        auto_highlight=True,
        radius=200,
        get_fill_color="color",
    ),
]

deck = pdk.Deck(
    views=[view],
    initial_view_state=view_state,
    tooltip={"text": "{STRNAME}, {PLZNAME}, co2_m2: {co2_m2}"},
    layers=layers,
    # Note that this must be set for the globe to be opaque
    parameters={"cull": True},
)

deck.to_html("globe_view.html", css_background_color="black")